// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/06/2019 19:16:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mips_processor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mips_processor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg reset;
reg slow_clock;
// wires                                               
wire [31:0] alu_oper2_out;
wire [4:0] input0_out;
wire [4:0] input1_out;
wire [31:0] Instruction_out;
wire [4:0] out_fRS_IDEX;
wire [4:0] out_fRT_IDEX;
wire [4:0] out_fWrite_reg_EXMEM;
wire [4:0] out_fWrite_reg_MEMWB;
wire [31:0] PC_out;
wire [1:0] rd1_out_debug;
wire [1:0] rd2_out_debug;
wire reg_write_out;
wire reset_stages_out;
wire sregdest_MEMWB_out;
wire [31:0] Write_data_out;
wire [4:0] write_reg_out;

// assign statements (if any)                          
mips_processor i1 (
// port map - connection between master ports and signals/registers   
	.alu_oper2_out(alu_oper2_out),
	.input0_out(input0_out),
	.input1_out(input1_out),
	.Instruction_out(Instruction_out),
	.out_fRS_IDEX(out_fRS_IDEX),
	.out_fRT_IDEX(out_fRT_IDEX),
	.out_fWrite_reg_EXMEM(out_fWrite_reg_EXMEM),
	.out_fWrite_reg_MEMWB(out_fWrite_reg_MEMWB),
	.PC_out(PC_out),
	.rd1_out_debug(rd1_out_debug),
	.rd2_out_debug(rd2_out_debug),
	.reg_write_out(reg_write_out),
	.reset(reset),
	.reset_stages_out(reset_stages_out),
	.slow_clock(slow_clock),
	.sregdest_MEMWB_out(sregdest_MEMWB_out),
	.Write_data_out(Write_data_out),
	.write_reg_out(write_reg_out)
);
initial 
begin 
#100000000 $finish;
end 

// slow_clock
always
begin
	slow_clock = 1'b0;
	slow_clock = #500000 1'b1;
	#500000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #1290000 1'b1;
end 
endmodule

